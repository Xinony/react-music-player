{"ast":null,"code":"import _classCallCheck from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"H:\\\\music\\\\react-music-player\\\\src\\\\views\\\\Song\\\\lyric\\\\index.js\";\nimport React, { Component } from 'react';\n/*\r\n * 有三个要点：\r\n * 1. 歌词 String => 歌词 array\r\n * 原本的歌词字符串是lyric中的属性 通过parseLyric转变为歌词数组 保存在this.formatLyrics中[[time,lyric],[time,lyric]]\r\n * 注：【this.formatLyrics 不是state属性，改变它视图不会刷新】\r\n * 通过 this.formatLyrics渲染出所有歌词\r\n * 2. 激活当前播放的歌词\r\n * 最初的想法是初始化歌词时多加一个元素[[time,lyric,0]]\r\n * 找到currentTime播放到比time多一秒的那一句歌词，遍历所有歌词数组，第三个元素置统统为0，当前激活的置为1，通过这个flag来决定是否激活\r\n * 结果数组更新了，视图不更新，因为this.formatLyrics不是state也不是props\r\n * 解决办法：通过设置一个activeLines的state，和歌词对应上，一样的思路\r\n * 3. 滚动\r\n * 每次改变歌词时顺便改一下绝对定位的top值即可，想要动画效果就使用transition，加类名取消类名反复操作\r\n */\n\nvar LyricBlock =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LyricBlock, _Component);\n\n  function LyricBlock() {\n    _classCallCheck(this, LyricBlock);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LyricBlock).apply(this, arguments));\n  }\n\n  _createClass(LyricBlock, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"lyric-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return LyricBlock;\n}(Component);\n\nexport default LyricBlock;","map":{"version":3,"sources":["H:\\music\\react-music-player\\src\\views\\Song\\lyric\\index.js"],"names":["React","Component","LyricBlock"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA;;;;;;;;;;;;;;;IAgBMC,U;;;;;;;;;;;;;6BACM;AACJ,aACI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAIH;;;;EANoBD,S;;AAQzB,eAAeC,UAAf","sourcesContent":["import React, { Component } from 'react';\r\n\r\n/*\r\n * 有三个要点：\r\n * 1. 歌词 String => 歌词 array\r\n * 原本的歌词字符串是lyric中的属性 通过parseLyric转变为歌词数组 保存在this.formatLyrics中[[time,lyric],[time,lyric]]\r\n * 注：【this.formatLyrics 不是state属性，改变它视图不会刷新】\r\n * 通过 this.formatLyrics渲染出所有歌词\r\n * 2. 激活当前播放的歌词\r\n * 最初的想法是初始化歌词时多加一个元素[[time,lyric,0]]\r\n * 找到currentTime播放到比time多一秒的那一句歌词，遍历所有歌词数组，第三个元素置统统为0，当前激活的置为1，通过这个flag来决定是否激活\r\n * 结果数组更新了，视图不更新，因为this.formatLyrics不是state也不是props\r\n * 解决办法：通过设置一个activeLines的state，和歌词对应上，一样的思路\r\n * 3. 滚动\r\n * 每次改变歌词时顺便改一下绝对定位的top值即可，想要动画效果就使用transition，加类名取消类名反复操作\r\n */\r\n\r\n\r\nclass LyricBlock extends Component{\r\n    render(){\r\n        return (\r\n            <div className=\"lyric-block\">\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default LyricBlock;\r\n"]},"metadata":{},"sourceType":"module"}