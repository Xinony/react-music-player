{"ast":null,"code":"import _objectSpread from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport axios from 'axios';\nimport { message } from 'antd';\nimport * as actionTypes from './actionTypes'; // 把歌单中的歌曲，添加到播放列表中\n\nvar playSongAct = function playSongAct(song) {\n  return {\n    type: actionTypes.PLAYER_PLAY_SONG,\n    payload: song\n  };\n}; //更改歌曲\n\n\nexport var changeSong = function changeSong(_ref) {\n  var song = _ref.song,\n      index = _ref.index,\n      _ref$flag = _ref.flag,\n      flag = _ref$flag === void 0 ? '' : _ref$flag;\n  return {\n    type: actionTypes.PLAYER_CHANGE_SONG,\n    payload: {\n      song: song,\n      index: index,\n      flag: flag\n    }\n  };\n};\n\nvar deleteSongType = function deleteSongType(id) {\n  return {\n    type: actionTypes.PLAYER_DELETE_SONG,\n    payload: id\n  };\n};\n\nexport var deleteSong = function deleteSong(id) {\n  return function (dispatch) {\n    dispatch(deleteSongType(id));\n  };\n};\nexport var clearQueue = function clearQueue() {\n  return {\n    type: actionTypes.PLAYER_CLEAR_QUEUE\n  };\n};\n\nvar initStarredListAct = function initStarredListAct(allList) {\n  return {\n    type: actionTypes.INIT_STARRED_LIST,\n    payload: allList\n  };\n}; // 初始化本地数据操作\n\n\nexport var initStarredList = function initStarredList() {\n  return function (dispatch) {\n    var allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || [];\n    dispatch(initStarredListAct(allStarredList));\n  };\n}; //收藏歌单操作\n\nexport var star = function star(item) {\n  return function (dispatch) {\n    //先处理本地储存\n    var allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || [];\n    allStarredList.push(item); // 重新初始化本地储存（把push进去的值，重新添加到本地储存中）\n\n    localStorage.setItem('allStarredList', JSON.stringify(allStarredList));\n    dispatch(initStarredListAct(allStarredList));\n  };\n};\nexport var cancelStar = function cancelStar(id) {\n  return function (dispatch) {\n    var index;\n    var allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || []; //使用循环查找出需要取消收藏的歌单，然后把id（allStarredList中的id）传出来\n\n    for (var i = 0; i < allStarredList.length; i++) {\n      var list = allStarredList[i];\n\n      if (list.id === id) {\n        index = i;\n      }\n    } // 使用字符串切割的方法，把 allStarredList 中符合条件的元素从收藏列表中删除\n\n\n    allStarredList.splice(index, 1);\n    localStorage.setItem('allStarredList', JSON.stringify(allStarredList));\n    dispatch(initStarredListAct(allStarredList));\n  };\n}; // 更新播放器的列表\n\nvar playerStatus = function playerStatus(status) {\n  return {\n    type: actionTypes.PLAYER_UPDATE_STATUS,\n    payload: status\n  };\n};\n\nvar isContain = function isContain(id, playlist) {\n  var len = playlist.length;\n\n  for (var i = 0; i < len; i++) {\n    var song = playlist[i];\n\n    if (song.id === id) {\n      return true;\n    }\n  }\n\n  return false;\n}; // 添加列表中的歌曲到播放列表\n\n\nexport var addSong2Que = function addSong2Que(s) {\n  return function (dispatch, getState) {\n    var play = getState('playQueue');\n    var playlist = play.playlist;\n    console.log(playlist);\n\n    if (isContain(s.id, playlist)) {\n      return;\n    }\n\n    axios.get(\"https://api.imjad.cn/cloudmusic/?type=song&id=\".concat(s.id)).then(function (res) {\n      var url = res.data.data[0].url;\n      console.log(s);\n\n      if (url) {\n        var song = _objectSpread({}, s, {\n          url: url\n        });\n\n        dispatch(playSongAct(song));\n      } else {\n        message.error('歌曲直链不存在');\n      }\n    });\n  };\n};\nexport var playSong2Que = function playSong2Que(s) {\n  return function (dispatch, getState) {};\n};\nexport var updatePlayerStatus = function updatePlayerStatus(status) {\n  return function (dispatch) {\n    dispatch(playerStatus(status));\n  };\n};","map":{"version":3,"sources":["H:\\music\\react-music-player\\src\\common\\store\\actionCreators.js"],"names":["axios","message","actionTypes","playSongAct","song","type","PLAYER_PLAY_SONG","payload","changeSong","index","flag","PLAYER_CHANGE_SONG","deleteSongType","id","PLAYER_DELETE_SONG","deleteSong","dispatch","clearQueue","PLAYER_CLEAR_QUEUE","initStarredListAct","allList","INIT_STARRED_LIST","initStarredList","allStarredList","JSON","parse","localStorage","getItem","star","item","push","setItem","stringify","cancelStar","i","length","list","splice","playerStatus","status","PLAYER_UPDATE_STATUS","isContain","playlist","len","addSong2Que","s","getState","play","console","log","get","then","res","url","data","error","playSong2Que","updatePlayerStatus"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { message } from 'antd';\r\nimport * as actionTypes from './actionTypes';\r\n\r\n// 把歌单中的歌曲，添加到播放列表中\r\nconst playSongAct = song => ({ type: actionTypes.PLAYER_PLAY_SONG, payload: song })\r\n//更改歌曲\r\nexport const changeSong = ({ song, index, flag = '' }) => ({\r\n    type: actionTypes.PLAYER_CHANGE_SONG,\r\n    payload: {\r\n        song,\r\n        index,\r\n        flag,\r\n    },\r\n})\r\nconst deleteSongType = (id) =>({\r\n    type: actionTypes.PLAYER_DELETE_SONG,\r\n     payload: id\r\n})\r\nexport const deleteSong = (id) => (dispatch) =>{\r\n    dispatch(deleteSongType(id));\r\n}\r\nexport const clearQueue = () => ({\r\n    type: actionTypes.PLAYER_CLEAR_QUEUE,\r\n})\r\n\r\nconst initStarredListAct = (allList) => ({\r\n    type: actionTypes.INIT_STARRED_LIST,\r\n    payload: allList\r\n});\r\n// 初始化本地数据操作\r\nexport const initStarredList = () => (dispatch) => {\r\n    const allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || [];\r\n    dispatch(initStarredListAct(allStarredList));\r\n}\r\n//收藏歌单操作\r\nexport const star = item => (dispatch) => {\r\n    //先处理本地储存\r\n    const allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || [];\r\n    allStarredList.push(item);\r\n    // 重新初始化本地储存（把push进去的值，重新添加到本地储存中）\r\n    localStorage.setItem('allStarredList',JSON.stringify(allStarredList));\r\n    dispatch(initStarredListAct(allStarredList));\r\n}\r\nexport const cancelStar = id => (dispatch) => {\r\n    let index;\r\n    const allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || [];\r\n    //使用循环查找出需要取消收藏的歌单，然后把id（allStarredList中的id）传出来\r\n    for (let i = 0; i < allStarredList.length; i++) {\r\n        const list = allStarredList[i];\r\n        if(list.id === id) {\r\n            index = i;\r\n        }\r\n    }\r\n    // 使用字符串切割的方法，把 allStarredList 中符合条件的元素从收藏列表中删除\r\n    allStarredList.splice(index,1);\r\n    localStorage.setItem('allStarredList',JSON.stringify(allStarredList));\r\n    dispatch(initStarredListAct(allStarredList));\r\n}\r\n// 更新播放器的列表\r\nconst playerStatus = status =>({\r\n    type:actionTypes.PLAYER_UPDATE_STATUS,\r\n    payload: status\r\n})\r\nconst isContain = (id, playlist) =>{\r\n    const len = playlist.length;\r\n    for (var i = 0; i < len; i++) {\r\n        const song = playlist[i]\r\n        if(song.id === id){\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n// 添加列表中的歌曲到播放列表\r\nexport const addSong2Que = s => (dispatch, getState) => {\r\n    const play= getState('playQueue');\r\n    const playlist = play.playlist;\r\n    console.log(playlist);\r\n    if(isContain(s.id, playlist)){\r\n        return\r\n    }\r\n    axios.get(`https://api.imjad.cn/cloudmusic/?type=song&id=${s.id}`).then((res)=>{\r\n        const { url } = res.data.data[0];\r\n        console.log(s);\r\n        if(url){\r\n            const song ={\r\n                ...s,\r\n                url\r\n            }\r\n            dispatch(playSongAct(song));\r\n        }else {\r\n            message.error('歌曲直链不存在')\r\n        }\r\n    })\r\n}\r\nexport const playSong2Que = s => (dispatch, getState) => {\r\n}\r\nexport const updatePlayerStatus = status => (dispatch) =>{\r\n    dispatch(playerStatus(status))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}