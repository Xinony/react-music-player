{"ast":null,"code":"import _classCallCheck from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"H:\\\\music\\\\react-music-player\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"H:\\\\music\\\\react-music-player\\\\src\\\\views\\\\Song\\\\lyric\\\\index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './style.less';\n\nvar parseLyric = function parseLyric(lyricsStr) {\n  // 将歌词切割成单行\n  var lines = lyricsStr.split('\\n'); // 匹配歌词中的时间，匹配类型[xx:xx.xx]\n\n  var pattern = /\\[\\d{2}:\\d{2}.\\d{1,3}\\]/g; // 保存最终结果的数组\n\n  var result = []; // 去掉不含时间的行\n\n  while (!pattern.test(lines[0])) {\n    lines = lines.splce(1);\n  } // 上面用'\\n'生成数组时，结果中最后一个元素为空，这里去掉\n\n\n  if (!lines[lines.length - 1].length) {\n    lines.pop();\n  }\n\n  var _loop = function _loop(i) {\n    var line = lines[i]; // 提取歌词，将时间清空，赶回一个新的字符串\n\n    var value = line.replace(pattern, ''); // 返回数组[时间]，对该数组做处理，将时间转为秒数，同时注意此类情况：多个时间点共享一句歌词，[时间1，时间2...]\n\n    var times = line.match(pattern) || [];\n    times.forEach(function (time) {\n      // 去掉时间内的中括号得到xx:xx.xx 并用：分隔得到[xx,xx.xx]的数组\n      var t = time.slice(1, -1).split(':'); // 将结果压入最终的数组\n      // 组合成 [时间,歌词]\n\n      result.push([parseInt(t[0], 10) * 60 + parseFloat(t[1]), value]); // 此处可能多个时间对应同一句歌词，而result.push显然会打乱顺序的，例如第一个时间点和最后一个时间点共享同一句歌词，而此时Push进去他们是相邻的，应按照时间顺序进行排序\n    });\n  };\n\n  for (var i = 0; i < lines.length; i++) {\n    _loop(i);\n  } // 加上下标 是为了取出时间 result[0][0]与result[1][0]做比较而不是result[0]与result[1]做比较\n\n\n  result.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n  return result;\n};\n\nvar LyricBlock =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LyricBlock, _Component);\n\n  function LyricBlock(props) {\n    var _this;\n\n    _classCallCheck(this, LyricBlock);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LyricBlock).call(this, props));\n\n    _this.renderLyrics = function (lyric) {\n      if (!lyric) return null;\n\n      if (lyric.nolyric || lyric.uncollected) {\n        return React.createElement(\"p\", {\n          className: \"lyric-info\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, \"\\u8BE5\\u6B4C\\u66F2\\u6682\\u65E0\\u6B4C\\u8BCDo(\\u256F\\u25A1\\u2570)o\");\n      }\n\n      var lyricStr = lyric.lrc.lyric;\n      _this.formatLyrics = parseLyric(lyricStr);\n      var _this$state = _this.state,\n          activeLines = _this$state.activeLines,\n          top = _this$state.top;\n      return React.createElement(\"ul\", {\n        style: {\n          top: \"\".concat(top, \"px\")\n        },\n        className: \"move-animate lyrics\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, _this.formatLyrics.map(function (line, index) {\n        return React.createElement(\"li\", {\n          className: activeLines[index] === 1 ? 'line active' : 'line',\n          key: line[0],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }, line[1]);\n      }));\n    };\n\n    _this.state = {\n      activeLines: [],\n      top: 40\n    };\n    return _this;\n  }\n\n  _createClass(LyricBlock, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      console.log(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var lyric = this.props.lyric;\n      return React.createElement(\"div\", {\n        className: \"lyric-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, lyric ? this.renderLyrics(lyric) : React.createElement(\"p\", {\n        className: \"lyric-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"\\u83B7\\u53D6\\u6B4C\\u8BCD\\u4E2D...\"));\n    }\n  }]);\n\n  return LyricBlock;\n}(Component);\n\nexport default LyricBlock;\nLyricBlock.protoTypes = {\n  lyric: PropTypes.object,\n  currentTime: PropTypes.number\n};","map":{"version":3,"sources":["H:\\music\\react-music-player\\src\\views\\Song\\lyric\\index.js"],"names":["React","Component","PropTypes","parseLyric","lyricsStr","lines","split","pattern","result","test","splce","length","pop","i","line","value","replace","times","match","forEach","time","t","slice","push","parseInt","parseFloat","sort","a","b","LyricBlock","props","renderLyrics","lyric","nolyric","uncollected","lyricStr","lrc","formatLyrics","state","activeLines","top","map","index","nextProps","console","log","protoTypes","object","currentTime","number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './style.less';\r\n\r\nconst parseLyric = (lyricsStr) =>{\r\n    // 将歌词切割成单行\r\n    let lines = lyricsStr.split('\\n');\r\n    // 匹配歌词中的时间，匹配类型[xx:xx.xx]\r\n    const pattern = /\\[\\d{2}:\\d{2}.\\d{1,3}\\]/g ;\r\n    // 保存最终结果的数组\r\n    const result = [];\r\n    // 去掉不含时间的行\r\n    while(!pattern.test(lines[0])){\r\n        lines = lines.splce(1);\r\n    }\r\n    // 上面用'\\n'生成数组时，结果中最后一个元素为空，这里去掉\r\n    if(!lines[lines.length - 1].length){lines.pop()}\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const line = lines[i];\r\n        // 提取歌词，将时间清空，赶回一个新的字符串\r\n        const value = line.replace(pattern, '');\r\n        // 返回数组[时间]，对该数组做处理，将时间转为秒数，同时注意此类情况：多个时间点共享一句歌词，[时间1，时间2...]\r\n        const times = line.match(pattern) || [];\r\n        times.forEach((time) =>{\r\n            // 去掉时间内的中括号得到xx:xx.xx 并用：分隔得到[xx,xx.xx]的数组\r\n            const t = time.slice(1, -1).split(':');\r\n            // 将结果压入最终的数组\r\n            // 组合成 [时间,歌词]\r\n            result.push([(parseInt(t[0], 10) * 60) + parseFloat(t[1]), value]);\r\n            // 此处可能多个时间对应同一句歌词，而result.push显然会打乱顺序的，例如第一个时间点和最后一个时间点共享同一句歌词，而此时Push进去他们是相邻的，应按照时间顺序进行排序\r\n        })\r\n    }\r\n    // 加上下标 是为了取出时间 result[0][0]与result[1][0]做比较而不是result[0]与result[1]做比较\r\n    result.sort((a, b) => a[0] - b[0])\r\n    return result\r\n}\r\nclass LyricBlock extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            activeLines: [],\r\n            top: 40\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps){\r\n        console.log(this);\r\n    }\r\n    renderLyrics = (lyric) =>{\r\n        if(!lyric) return null;\r\n        if(lyric.nolyric || lyric.uncollected){\r\n            return <p className=\"lyric-info\">该歌曲暂无歌词o(╯□╰)o</p>\r\n        }\r\n        const lyricStr = lyric.lrc.lyric;\r\n        this.formatLyrics = parseLyric(lyricStr);\r\n        const { activeLines, top } = this.state;\r\n        return(\r\n            <ul\r\n                style={{top: `${top}px`}}\r\n                className=\"move-animate lyrics\"\r\n            >\r\n            {this.formatLyrics.map((line, index) =>(\r\n                <li\r\n                    className={activeLines[index] === 1 ? 'line active' : 'line'}\r\n                    key={line[0]}\r\n                >\r\n                    {line[1]}\r\n                </li>\r\n            ))}\r\n            </ul>\r\n        )\r\n    }\r\n    render(){\r\n        const { lyric } = this.props;\r\n        return (\r\n            <div className=\"lyric-block\">\r\n                {lyric ? (\r\n                    this.renderLyrics(lyric)\r\n                ) : (\r\n                    <p className=\"lyric-info\">获取歌词中...</p>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default LyricBlock;\r\n\r\nLyricBlock.protoTypes = {\r\n  lyric: PropTypes.object,\r\n  currentTime: PropTypes.number,\r\n}\r\n"]},"metadata":{},"sourceType":"module"}