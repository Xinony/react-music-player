{"ast":null,"code":"// import axios from 'axios';\n// import { message } from 'antd';\nimport * as actionTypes from './actionTypes'; //更改歌曲\n\nexport var changeSong = function changeSong(_ref) {\n  var song = _ref.song,\n      index = _ref.index,\n      _ref$flag = _ref.flag,\n      flag = _ref$flag === void 0 ? '' : _ref$flag;\n  return {\n    type: actionTypes.PLAYER_CHANGE_SONG,\n    payload: {\n      song: song,\n      index: index,\n      flag: flag\n    }\n  };\n};\n\nvar initStarredListAct = function initStarredListAct(allList) {\n  return {\n    type: actionTypes.INIT_STARRED_LIST,\n    payload: allList\n  };\n}; // 初始化本地数据操作\n\n\nexport var initStarredList = function initStarredList() {\n  return function (dispatch) {\n    var allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || [];\n    dispatch(initStarredListAct(allStarredList));\n  };\n}; //收藏歌单操作\n\nexport var star = function star(item) {\n  return function (dispatch) {\n    //先处理本地储存\n    var allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || [];\n    allStarredList.push(item); // 重新初始化本地储存（把push进去的值，重新添加到本地储存中）\n\n    localStorage.setItem('allStarredList', JSON.stringify(allStarredList));\n    dispatch(initStarredListAct(allStarredList));\n  };\n};\nexport var cancelStar = function cancelStar(id) {\n  return function (dispatch) {\n    var index;\n    var allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || []; //使用循环查找出需要取消收藏的歌单，然后把id（allStarredList中的id）传出来\n\n    for (var i = 0; i < allStarredList.length; i++) {\n      var list = allStarredList[i];\n\n      if (list.id === id) {\n        index = i;\n      }\n    } // 使用字符串切割的方法，把 allStarredList 中符合条件的元素从收藏列表中删除\n\n\n    allStarredList.splice(index, 1);\n    localStorage.setItem('allStarredList', JSON.stringify(allStarredList));\n    dispatch(initStarredListAct(allStarredList));\n  };\n}; // 更新播放器的列表\n\nexport var updatePlayerStatus = function updatePlayerStatus(status) {\n  return {};\n};","map":{"version":3,"sources":["H:\\music\\react-music-player\\src\\common\\store\\actionCreators.js"],"names":["actionTypes","changeSong","song","index","flag","type","PLAYER_CHANGE_SONG","payload","initStarredListAct","allList","INIT_STARRED_LIST","initStarredList","dispatch","allStarredList","JSON","parse","localStorage","getItem","star","item","push","setItem","stringify","cancelStar","id","i","length","list","splice","updatePlayerStatus","status"],"mappings":"AAAA;AACA;AACA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B,C,CAEA;;AACA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAASC,KAAT,QAASA,KAAT;AAAA,uBAAgBC,IAAhB;AAAA,MAAgBA,IAAhB,0BAAuB,EAAvB;AAAA,SAAiC;AACzDC,IAAAA,IAAI,EAAEL,WAAW,CAACM,kBADuC;AAEzDC,IAAAA,OAAO,EAAE;AACPL,MAAAA,IAAI,EAAJA,IADO;AAEPC,MAAAA,KAAK,EAALA,KAFO;AAGPC,MAAAA,IAAI,EAAJA;AAHO;AAFgD,GAAjC;AAAA,CAAnB;;AASP,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD;AAAA,SAAc;AACrCJ,IAAAA,IAAI,EAAEL,WAAW,CAACU,iBADmB;AAErCH,IAAAA,OAAO,EAAEE;AAF4B,GAAd;AAAA,CAA3B,C,CAIA;;;AACA,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAM,UAACC,QAAD,EAAc;AAC/C,QAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAX,KAAsD,EAA7E;AACAL,IAAAA,QAAQ,CAACJ,kBAAkB,CAACK,cAAD,CAAnB,CAAR;AACH,GAH8B;AAAA,CAAxB,C,CAIP;;AACA,OAAO,IAAMK,IAAI,GAAG,SAAPA,IAAO,CAAAC,IAAI;AAAA,SAAI,UAACP,QAAD,EAAc;AACtC;AACA,QAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAX,KAAsD,EAA7E;AACAJ,IAAAA,cAAc,CAACO,IAAf,CAAoBD,IAApB,EAHsC,CAItC;;AACAH,IAAAA,YAAY,CAACK,OAAb,CAAqB,gBAArB,EAAsCP,IAAI,CAACQ,SAAL,CAAeT,cAAf,CAAtC;AACAD,IAAAA,QAAQ,CAACJ,kBAAkB,CAACK,cAAD,CAAnB,CAAR;AACH,GAPuB;AAAA,CAAjB;AAQP,OAAO,IAAMU,UAAU,GAAG,SAAbA,UAAa,CAAAC,EAAE;AAAA,SAAI,UAACZ,QAAD,EAAc;AAC1C,QAAIT,KAAJ;AACA,QAAMU,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAX,KAAsD,EAA7E,CAF0C,CAG1C;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,cAAc,CAACa,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,UAAME,IAAI,GAAGd,cAAc,CAACY,CAAD,CAA3B;;AACA,UAAGE,IAAI,CAACH,EAAL,KAAYA,EAAf,EAAmB;AACfrB,QAAAA,KAAK,GAAGsB,CAAR;AACH;AACJ,KATyC,CAU1C;;;AACAZ,IAAAA,cAAc,CAACe,MAAf,CAAsBzB,KAAtB,EAA4B,CAA5B;AACAa,IAAAA,YAAY,CAACK,OAAb,CAAqB,gBAArB,EAAsCP,IAAI,CAACQ,SAAL,CAAeT,cAAf,CAAtC;AACAD,IAAAA,QAAQ,CAACJ,kBAAkB,CAACK,cAAD,CAAnB,CAAR;AACH,GAd2B;AAAA,CAArB,C,CAeP;;AACA,OAAO,IAAMgB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,MAAM;AAAA,SAAI,EAAJ;AAAA,CAAjC","sourcesContent":["// import axios from 'axios';\r\n// import { message } from 'antd';\r\nimport * as actionTypes from './actionTypes';\r\n\r\n//更改歌曲\r\nexport const changeSong = ({ song, index, flag = '' }) => ({\r\n  type: actionTypes.PLAYER_CHANGE_SONG,\r\n  payload: {\r\n    song,\r\n    index,\r\n    flag,\r\n  },\r\n})\r\n\r\nconst initStarredListAct = (allList) => ({\r\n    type: actionTypes.INIT_STARRED_LIST,\r\n    payload: allList\r\n});\r\n// 初始化本地数据操作\r\nexport const initStarredList = () => (dispatch) => {\r\n    const allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || [];\r\n    dispatch(initStarredListAct(allStarredList));\r\n}\r\n//收藏歌单操作\r\nexport const star = item => (dispatch) => {\r\n    //先处理本地储存\r\n    const allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || [];\r\n    allStarredList.push(item);\r\n    // 重新初始化本地储存（把push进去的值，重新添加到本地储存中）\r\n    localStorage.setItem('allStarredList',JSON.stringify(allStarredList));\r\n    dispatch(initStarredListAct(allStarredList));\r\n}\r\nexport const cancelStar = id => (dispatch) => {\r\n    let index;\r\n    const allStarredList = JSON.parse(localStorage.getItem('allStarredList')) || [];\r\n    //使用循环查找出需要取消收藏的歌单，然后把id（allStarredList中的id）传出来\r\n    for (let i = 0; i < allStarredList.length; i++) {\r\n        const list = allStarredList[i];\r\n        if(list.id === id) {\r\n            index = i;\r\n        }\r\n    }\r\n    // 使用字符串切割的方法，把 allStarredList 中符合条件的元素从收藏列表中删除\r\n    allStarredList.splice(index,1);\r\n    localStorage.setItem('allStarredList',JSON.stringify(allStarredList));\r\n    dispatch(initStarredListAct(allStarredList));\r\n}\r\n// 更新播放器的列表\r\nexport const updatePlayerStatus = status =>({\r\n    \r\n})\r\n"]},"metadata":{},"sourceType":"module"}